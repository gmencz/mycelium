{"version":3,"file":"react.cjs.development.js","sources":["../src/mycelium-provider.tsx","../src/use-mycelium-client.tsx","../src/use-channel.tsx","../src/use-publish-event.tsx","../src/use-subscribe.tsx","../src/use-on-event.tsx","../src/use-on-any-event.tsx","../src/use-once-event.tsx","../src/use-prepend-any-event.tsx"],"sourcesContent":["import React, { createContext, ReactNode, useEffect, useState } from 'react';\nimport { Client, Connection } from '@mycelium-now/core';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\n\nexport interface MyceliumContextValue {\n  isConnecting: boolean;\n  isConnected: boolean;\n  isError: boolean;\n  error: Error | null;\n  client: Client | null;\n}\n\n// Context setup\nexport const MyceliumContext = createContext<MyceliumContextValue | null>(null);\n\n/**\n * Props for `<MyceliumProvider />`.\n */\ninterface MyceliumProviderProps extends Omit<Connection, 'manual'> {\n  children: ReactNode;\n}\n\n/**\n * Provider that creates a Mycelium client and provides it to child hooks throughout your app.\n * @param props Connection options for the Mycelium client\n */\nexport function MyceliumProvider({\n  authentication,\n  baseURL,\n  children,\n}: MyceliumProviderProps) {\n  const [state, setState] = useState<MyceliumContextValue>({\n    isConnecting: false,\n    isConnected: false,\n    isError: false,\n    error: null,\n    client: null,\n  });\n\n  useDeepCompareEffect(() => {\n    async function _connect() {\n      try {\n        setState({\n          isConnecting: true,\n          isConnected: false,\n          isError: false,\n          error: null,\n          client: null,\n        });\n\n        const client = new Client({\n          authentication,\n          baseURL,\n          manual: true,\n        });\n\n        await client.connect({ authentication, baseURL });\n\n        setState({\n          isConnecting: false,\n          isConnected: true,\n          isError: false,\n          error: null,\n          client,\n        });\n      } catch (error) {\n        setState({\n          isConnecting: false,\n          isConnected: true,\n          isError: true,\n          error: error as Error,\n          client: null,\n        });\n      }\n    }\n\n    _connect();\n\n    return () => {\n      state.client?.disconnect();\n    };\n  }, [authentication, baseURL]);\n\n  return (\n    <MyceliumContext.Provider value={state}>\n      {children}\n    </MyceliumContext.Provider>\n  );\n}\n","import { useContext } from 'react';\nimport { MyceliumContext } from './mycelium-provider';\n\nexport const NOT_IN_CONTEXT_WARNING =\n  'No Mycelium context. Did you forget to wrap your app in a <MyceliumProvider />?';\n\nexport function useMyceliumClient() {\n  const ctx = useContext(MyceliumContext);\n\n  if (ctx == null) {\n    throw new Error(NOT_IN_CONTEXT_WARNING);\n  }\n\n  return ctx;\n}\n","import { Channel } from '@mycelium-now/core';\nimport { useEffect, useState } from 'react';\nimport invariant from 'invariant';\nimport { useMyceliumClient } from './use-mycelium-client';\n\n/**\n * Subscribe to a channel.\n * @param channelName The name of the channel you want to subscribe to.\n * @returns Instance of the channel you just subscribed to.\n *\n * @example\n * ```typescript\n * const channel = useChannel(\"my-channel\")\n * channel.on(\"some-event\", (data) => {\n *    // Do something with data\n * })\n * ```\n */\nexport function useChannel(channelName: string) {\n  invariant(channelName, 'Must supply channelName to useChannel');\n\n  const { client, isConnected } = useMyceliumClient();\n  const [channel, setChannel] = useState<Channel>();\n  const [state, setState] = useState({\n    isLoading: false,\n    isSuccess: false,\n    isError: false,\n    error: null as Error | null,\n  });\n\n  useEffect(() => {\n    async function _subscribe() {\n      // Return early if there's no client or if it's not connected\n      if (!client || !isConnected) {\n        return;\n      }\n\n      try {\n        setState({\n          isLoading: true,\n          isSuccess: false,\n          isError: false,\n          error: null,\n        });\n\n        setChannel(await client.channel(channelName));\n\n        setState({\n          isLoading: false,\n          isSuccess: true,\n          isError: false,\n          error: null,\n        });\n      } catch (error) {\n        setState({\n          isLoading: false,\n          isSuccess: false,\n          isError: true,\n          error: error as Error,\n        });\n      }\n    }\n\n    _subscribe();\n\n    // Cleanup on unmount/re-render\n    return () => {\n      channel?.unsubscribe().catch(console.error);\n    };\n  }, [client]);\n\n  return {\n    channel,\n    isLoading: state.isLoading,\n    isSuccess: state.isSuccess,\n    isError: state.isError,\n    error: state.error,\n  };\n}\n","import { Channel, Listener } from '@mycelium-now/core';\nimport { useEffect, useState } from 'react';\n\n/**\n * Publish an event.\n *\n * @param channel Mycelium channel to publish on\n */\nexport function usePublishEvent(channel: Channel | undefined) {\n  const [state, setState] = useState({\n    isLoading: false,\n    isSuccess: false,\n    isError: false,\n    error: null as Error | null,\n  });\n\n  return {\n    publish: async <TData = unknown,>(\n      event: string,\n      data: TData,\n      includePublisher: boolean = false\n    ) => {\n      if (!channel) {\n        return;\n      }\n\n      try {\n        setState({\n          isLoading: true,\n          isSuccess: false,\n          isError: false,\n          error: null,\n        });\n\n        await channel.publish(event, data, includePublisher);\n\n        setState({\n          isLoading: false,\n          isSuccess: true,\n          isError: false,\n          error: null,\n        });\n      } catch (error) {\n        setState({\n          isLoading: false,\n          isSuccess: false,\n          isError: true,\n          error: error as Error,\n        });\n      }\n    },\n\n    isLoading: state.isLoading,\n    isSuccess: state.isSuccess,\n    isError: state.isError,\n    error: state.error,\n  };\n}\n","import { Channel } from '@mycelium-now/core';\nimport { useEffect, useState } from 'react';\nimport invariant from 'invariant';\nimport { useMyceliumClient } from './use-mycelium-client';\n\n/**\n * Subscribe to a channel lazily.\n *\n * @example\n * ```typescript\n * const channel = useChannel(\"my-channel\")\n * channel.on(\"some-event\", (data) => {\n *    // Do something with data\n * })\n * ```\n */\nexport function useSubscribe() {\n  const { client } = useMyceliumClient();\n  const [channel, setChannel] = useState<Channel>();\n  const [state, setState] = useState({\n    isLoading: false,\n    isSuccess: false,\n    isError: false,\n    error: null as Error | null,\n  });\n\n  useEffect(() => {\n    // Cleanup on unmount/re-render\n    return () => {\n      channel?.unsubscribe().catch(console.error);\n    };\n  }, [client]);\n\n  return {\n    subscribe: async (channelName: string) => {\n      if (!client) {\n        return;\n      }\n\n      try {\n        setState({\n          isLoading: true,\n          isSuccess: false,\n          isError: false,\n          error: null,\n        });\n\n        setChannel(await client.channel(channelName));\n\n        setState({\n          isLoading: false,\n          isSuccess: true,\n          isError: false,\n          error: null,\n        });\n      } catch (error) {\n        setState({\n          isLoading: false,\n          isSuccess: false,\n          isError: true,\n          error: error as Error,\n        });\n      }\n    },\n\n    isLoading: state.isLoading,\n    isSuccess: state.isSuccess,\n    isError: state.isError,\n    error: state.error,\n  };\n}\n","import { Channel, Listener } from '@mycelium-now/core';\n\nimport invariant from 'invariant';\nimport { useEffect } from 'react';\n\n/**\n * Adds the listener function to the end of the listeners array for the event.\n *\n * @param channel Mycelium channel to listen to\n * @param event Name of event to listen to\n * @param listener Listener function to call on a new event\n */\nexport function useOnEvent<TData = unknown>(\n  channel: Channel | undefined,\n  event: string,\n  listener: Listener<TData>\n) {\n  // error when required arguments aren't passed.\n  invariant(event, 'Must supply event to useOnEvent');\n  invariant(listener, 'Must supply listener to useOnEvent');\n\n  useEffect(() => {\n    if (!channel) {\n      return;\n    }\n\n    channel.on(event, listener);\n\n    return () => {\n      channel.off(event, listener);\n    };\n  }, [channel, event, listener]);\n}\n","import { Channel, Listener } from '@mycelium-now/core';\n\nimport invariant from 'invariant';\nimport { useEffect } from 'react';\n\n/**\n * Adds a listener that will be fired when any event is emitted.\n *\n * @param channel Mycelium channel to listen to\n * @param listener Listener function to call when any event is emitted\n */\nexport function useOnAnyEvent<TData = unknown>(\n  channel: Channel | undefined,\n  listener: Listener<TData>\n) {\n  // error when required arguments aren't passed.\n  invariant(listener, 'Must supply listener to useOnAnyEvent');\n\n  useEffect(() => {\n    if (!channel) {\n      return;\n    }\n\n    channel.onAny(listener);\n\n    return () => {\n      channel.offAny(listener);\n    };\n  }, [channel, listener]);\n}\n","import { Channel, Listener } from '@mycelium-now/core';\n\nimport invariant from 'invariant';\nimport { useEffect } from 'react';\n\n/**\n * Adds a one-time listener function for the event.\n *\n * @param channel Mycelium channel to listen to\n * @param event Name of event to listen to\n * @param listener Listener function to call on a new event\n */\nexport function useOnceEvent<TData = unknown>(\n  channel: Channel | undefined,\n  event: string,\n  listener: Listener<TData>\n) {\n  // error when required arguments aren't passed.\n  invariant(event, 'Must supply event to useOnceEvent');\n  invariant(listener, 'Must supply listener to useOnceEvent');\n\n  useEffect(() => {\n    if (!channel) {\n      return;\n    }\n\n    channel.once(event, listener);\n\n    return () => {\n      channel.offOnce(event, listener);\n    };\n  }, [channel, event, listener]);\n}\n","import { Channel, Listener } from '@mycelium-now/core';\n\nimport invariant from 'invariant';\nimport { useEffect } from 'react';\n\n/**\n * Adds a listener that will be fired when any event is emitted. The listener is added to the beginning of the listeners array.\n *\n * @param channel Mycelium channel to listen to\n * @param listener Listener function to call when any event is emitted\n */\nexport function usePrependAnyEvent<TData = unknown>(\n  channel: Channel | undefined,\n  listener: Listener<TData>\n) {\n  // error when required arguments aren't passed.\n  invariant(listener, 'Must supply listener to usePrependAnyEvent');\n\n  useEffect(() => {\n    if (!channel) {\n      return;\n    }\n\n    channel.prependAny(listener);\n\n    return () => {\n      channel.offAny(listener);\n    };\n  }, [channel, listener]);\n}\n"],"names":["MyceliumContext","createContext","MyceliumProvider","authentication","baseURL","children","useState","isConnecting","isConnected","isError","error","client","state","setState","useDeepCompareEffect","_connect","Client","manual","connect","disconnect","React","createElement","Provider","value","NOT_IN_CONTEXT_WARNING","useMyceliumClient","ctx","useContext","Error","useChannel","channelName","invariant","channel","setChannel","isLoading","isSuccess","useEffect","_subscribe","unsubscribe","console","usePublishEvent","publish","event","data","includePublisher","useSubscribe","subscribe","useOnEvent","listener","on","off","useOnAnyEvent","onAny","offAny","useOnceEvent","once","offOnce","usePrependAnyEvent","prependAny"],"mappings":"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"}