{"version":3,"file":"react.cjs.production.min.js","sources":["../src/mycelium-provider.tsx","../src/use-mycelium-client.tsx","../src/use-channel.tsx","../src/use-on-any-event.tsx","../src/use-on-event.tsx","../src/use-once-event.tsx","../src/use-prepend-any-event.tsx","../src/use-publish-event.tsx","../src/use-subscribe.tsx"],"sourcesContent":["import React, { createContext, ReactNode, useEffect, useState } from 'react';\nimport { Client, Connection } from '@mycelium-now/core';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\n\nexport interface MyceliumContextValue {\n  isConnecting: boolean;\n  isConnected: boolean;\n  isError: boolean;\n  error: Error | null;\n  client: Client | null;\n}\n\n// Context setup\nexport const MyceliumContext = createContext<MyceliumContextValue | null>(null);\n\n/**\n * Props for `<MyceliumProvider />`.\n */\ninterface MyceliumProviderProps extends Omit<Connection, 'manual'> {\n  children: ReactNode;\n}\n\n/**\n * Provider that creates a Mycelium client and provides it to child hooks throughout your app.\n * @param props Connection options for the Mycelium client\n */\nexport function MyceliumProvider({\n  authentication,\n  baseURL,\n  children,\n}: MyceliumProviderProps) {\n  const [state, setState] = useState<MyceliumContextValue>({\n    isConnecting: false,\n    isConnected: false,\n    isError: false,\n    error: null,\n    client: null,\n  });\n\n  useDeepCompareEffect(() => {\n    async function _connect() {\n      try {\n        setState({\n          isConnecting: true,\n          isConnected: false,\n          isError: false,\n          error: null,\n          client: null,\n        });\n\n        const client = new Client({\n          authentication,\n          baseURL,\n          manual: true,\n        });\n\n        await client.connect({ authentication, baseURL });\n\n        setState({\n          isConnecting: false,\n          isConnected: true,\n          isError: false,\n          error: null,\n          client,\n        });\n      } catch (error) {\n        setState({\n          isConnecting: false,\n          isConnected: true,\n          isError: true,\n          error: error as Error,\n          client: null,\n        });\n      }\n    }\n\n    _connect();\n\n    return () => {\n      state.client?.disconnect();\n    };\n  }, [authentication, baseURL]);\n\n  return (\n    <MyceliumContext.Provider value={state}>\n      {children}\n    </MyceliumContext.Provider>\n  );\n}\n","import { useContext } from 'react';\nimport { MyceliumContext } from './mycelium-provider';\n\nexport const NOT_IN_CONTEXT_WARNING =\n  'No Mycelium context. Did you forget to wrap your app in a <MyceliumProvider />?';\n\nexport function useMyceliumClient() {\n  const ctx = useContext(MyceliumContext);\n\n  if (ctx == null) {\n    throw new Error(NOT_IN_CONTEXT_WARNING);\n  }\n\n  return ctx;\n}\n","import { Channel } from '@mycelium-now/core';\nimport { useEffect, useState } from 'react';\nimport invariant from 'invariant';\nimport { useMyceliumClient } from './use-mycelium-client';\n\n/**\n * Subscribe to a channel.\n * @param channelName The name of the channel you want to subscribe to.\n * @returns Instance of the channel you just subscribed to.\n *\n * @example\n * ```typescript\n * const channel = useChannel(\"my-channel\")\n * channel.on(\"some-event\", (data) => {\n *    // Do something with data\n * })\n * ```\n */\nexport function useChannel(channelName: string) {\n  invariant(channelName, 'Must supply channelName to useChannel');\n\n  const { client, isConnected } = useMyceliumClient();\n  const [channel, setChannel] = useState<Channel>();\n  const [state, setState] = useState({\n    isLoading: false,\n    isSuccess: false,\n    isError: false,\n    error: null as Error | null,\n  });\n\n  useEffect(() => {\n    async function _subscribe() {\n      // Return early if there's no client or if it's not connected\n      if (!client || !isConnected) {\n        return;\n      }\n\n      try {\n        setState({\n          isLoading: true,\n          isSuccess: false,\n          isError: false,\n          error: null,\n        });\n\n        setChannel(await client.channel(channelName));\n\n        setState({\n          isLoading: false,\n          isSuccess: true,\n          isError: false,\n          error: null,\n        });\n      } catch (error) {\n        setState({\n          isLoading: false,\n          isSuccess: false,\n          isError: true,\n          error: error as Error,\n        });\n      }\n    }\n\n    _subscribe();\n\n    // Cleanup on unmount/re-render\n    return () => {\n      channel?.unsubscribe().catch(console.error);\n    };\n  }, [client]);\n\n  return {\n    channel,\n    isLoading: state.isLoading,\n    isSuccess: state.isSuccess,\n    isError: state.isError,\n    error: state.error,\n  };\n}\n","import { Channel, Listener } from '@mycelium-now/core';\n\nimport invariant from 'invariant';\nimport { useEffect } from 'react';\n\n/**\n * Adds a listener that will be fired when any event is emitted.\n *\n * @param channel Mycelium channel to listen to\n * @param listener Listener function to call when any event is emitted\n */\nexport function useOnAnyEvent<TData = unknown>(\n  channel: Channel | undefined,\n  listener: Listener<TData>\n) {\n  // error when required arguments aren't passed.\n  invariant(listener, 'Must supply listener to useOnAnyEvent');\n\n  useEffect(() => {\n    if (!channel) {\n      return;\n    }\n\n    channel.onAny(listener);\n\n    return () => {\n      channel.offAny(listener);\n    };\n  }, [channel, listener]);\n}\n","import { Channel, Listener } from '@mycelium-now/core';\n\nimport invariant from 'invariant';\nimport { useEffect } from 'react';\n\n/**\n * Adds the listener function to the end of the listeners array for the event.\n *\n * @param channel Mycelium channel to listen to\n * @param event Name of event to listen to\n * @param listener Listener function to call on a new event\n */\nexport function useOnEvent<TData = unknown>(\n  channel: Channel | undefined,\n  event: string,\n  listener: Listener<TData>\n) {\n  // error when required arguments aren't passed.\n  invariant(event, 'Must supply event to useOnEvent');\n  invariant(listener, 'Must supply listener to useOnEvent');\n\n  useEffect(() => {\n    if (!channel) {\n      return;\n    }\n\n    channel.on(event, listener);\n\n    return () => {\n      channel.off(event, listener);\n    };\n  }, [channel, event, listener]);\n}\n","import { Channel, Listener } from '@mycelium-now/core';\n\nimport invariant from 'invariant';\nimport { useEffect } from 'react';\n\n/**\n * Adds a one-time listener function for the event.\n *\n * @param channel Mycelium channel to listen to\n * @param event Name of event to listen to\n * @param listener Listener function to call on a new event\n */\nexport function useOnceEvent<TData = unknown>(\n  channel: Channel | undefined,\n  event: string,\n  listener: Listener<TData>\n) {\n  // error when required arguments aren't passed.\n  invariant(event, 'Must supply event to useOnceEvent');\n  invariant(listener, 'Must supply listener to useOnceEvent');\n\n  useEffect(() => {\n    if (!channel) {\n      return;\n    }\n\n    channel.once(event, listener);\n\n    return () => {\n      channel.offOnce(event, listener);\n    };\n  }, [channel, event, listener]);\n}\n","import { Channel, Listener } from '@mycelium-now/core';\n\nimport invariant from 'invariant';\nimport { useEffect } from 'react';\n\n/**\n * Adds a listener that will be fired when any event is emitted. The listener is added to the beginning of the listeners array.\n *\n * @param channel Mycelium channel to listen to\n * @param listener Listener function to call when any event is emitted\n */\nexport function usePrependAnyEvent<TData = unknown>(\n  channel: Channel | undefined,\n  listener: Listener<TData>\n) {\n  // error when required arguments aren't passed.\n  invariant(listener, 'Must supply listener to usePrependAnyEvent');\n\n  useEffect(() => {\n    if (!channel) {\n      return;\n    }\n\n    channel.prependAny(listener);\n\n    return () => {\n      channel.offAny(listener);\n    };\n  }, [channel, listener]);\n}\n","import { Channel, Listener } from '@mycelium-now/core';\nimport { useEffect, useState } from 'react';\n\n/**\n * Publish an event.\n *\n * @param channel Mycelium channel to publish on\n */\nexport function usePublishEvent(channel: Channel | undefined) {\n  const [state, setState] = useState({\n    isLoading: false,\n    isSuccess: false,\n    isError: false,\n    error: null as Error | null,\n  });\n\n  return {\n    publish: async <TData = unknown,>(\n      event: string,\n      data: TData,\n      includePublisher: boolean = false\n    ) => {\n      if (!channel) {\n        return;\n      }\n\n      try {\n        setState({\n          isLoading: true,\n          isSuccess: false,\n          isError: false,\n          error: null,\n        });\n\n        await channel.publish(event, data, includePublisher);\n\n        setState({\n          isLoading: false,\n          isSuccess: true,\n          isError: false,\n          error: null,\n        });\n      } catch (error) {\n        setState({\n          isLoading: false,\n          isSuccess: false,\n          isError: true,\n          error: error as Error,\n        });\n      }\n    },\n\n    isLoading: state.isLoading,\n    isSuccess: state.isSuccess,\n    isError: state.isError,\n    error: state.error,\n  };\n}\n","import { Channel } from '@mycelium-now/core';\nimport { useEffect, useState } from 'react';\nimport invariant from 'invariant';\nimport { useMyceliumClient } from './use-mycelium-client';\n\n/**\n * Subscribe to a channel lazily.\n *\n * @example\n * ```typescript\n * const channel = useChannel(\"my-channel\")\n * channel.on(\"some-event\", (data) => {\n *    // Do something with data\n * })\n * ```\n */\nexport function useSubscribe() {\n  const { client } = useMyceliumClient();\n  const [channel, setChannel] = useState<Channel>();\n  const [state, setState] = useState({\n    isLoading: false,\n    isSuccess: false,\n    isError: false,\n    error: null as Error | null,\n  });\n\n  useEffect(() => {\n    // Cleanup on unmount/re-render\n    return () => {\n      channel?.unsubscribe().catch(console.error);\n    };\n  }, [client]);\n\n  return {\n    subscribe: async (channelName: string) => {\n      if (!client) {\n        return;\n      }\n\n      try {\n        setState({\n          isLoading: true,\n          isSuccess: false,\n          isError: false,\n          error: null,\n        });\n\n        setChannel(await client.channel(channelName));\n\n        setState({\n          isLoading: false,\n          isSuccess: true,\n          isError: false,\n          error: null,\n        });\n      } catch (error) {\n        setState({\n          isLoading: false,\n          isSuccess: false,\n          isError: true,\n          error: error as Error,\n        });\n      }\n    },\n\n    isLoading: state.isLoading,\n    isSuccess: state.isSuccess,\n    isError: state.isError,\n    error: state.error,\n  };\n}\n"],"names":["MyceliumContext","createContext","useMyceliumClient","ctx","useContext","Error","_ref","authentication","baseURL","children","_useState","useState","isConnecting","isConnected","isError","error","client","state","setState","useDeepCompareEffect","_connect2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","Client","manual","connect","t0","stop","apply","this","arguments","_connect","_state$client","disconnect","React","createElement","Provider","value","channelName","invariant","_useMyceliumClient","channel","setChannel","_useState2","isLoading","isSuccess","useEffect","_subscribe2","abrupt","t1","sent","t2","_subscribe","unsubscribe","console","listener","onAny","offAny","event","on","off","once","offOnce","prependAny","_publish","publish","data","includePublisher","_x","_x2","_x3","subscribe"],"mappings":"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"}