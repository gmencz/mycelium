'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var invariant = require('invariant');
var core = require('@mycelium-now/core');
var useDeepCompareEffect = require('use-deep-compare-effect');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var invariant__default = /*#__PURE__*/_interopDefaultLegacy(invariant);
var useDeepCompareEffect__default = /*#__PURE__*/_interopDefaultLegacy(useDeepCompareEffect);

function _regeneratorRuntime() {
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

  _regeneratorRuntime = function () {
    return exports;
  };

  var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }

  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
    return generator._invoke = function (innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");

        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }

        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);

          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }

          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }(innerFn, self, context), generator;
  }

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  exports.wrap = wrap;
  var ContinueSentinel = {};

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {}

  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if ("throw" !== record.type) {
        var result = record.arg,
            value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }

      reject(record.arg);
    }

    var previousPromise;

    this._invoke = function (method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    };
  }

  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (undefined === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }

  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;

          return next.value = undefined, next.done = !0, next;
        };

        return next.next = next;
      }
    }

    return {
      next: doneResult
    };
  }

  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }

  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (object) {
    var keys = [];

    for (var key in object) keys.push(key);

    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }

      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;

      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
            record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      }

      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

var MyceliumContext = /*#__PURE__*/React.createContext(null);
/**
 * Provider that creates a Mycelium client and provides it to child hooks throughout your app.
 * @param props Connection options for the Mycelium client
 */

function MyceliumProvider(_ref) {
  var authentication = _ref.authentication,
      baseURL = _ref.baseURL,
      children = _ref.children;

  var _useState = React.useState({
    isConnecting: false,
    isConnected: false,
    isError: false,
    error: null,
    client: null
  }),
      state = _useState[0],
      setState = _useState[1];

  useDeepCompareEffect__default["default"](function () {
    function _connect() {
      return _connect2.apply(this, arguments);
    }

    function _connect2() {
      _connect2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var client;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                setState({
                  isConnecting: true,
                  isConnected: false,
                  isError: false,
                  error: null,
                  client: null
                });
                client = new core.Client({
                  authentication: authentication,
                  baseURL: baseURL,
                  manual: true
                });
                _context.next = 5;
                return client.connect({
                  authentication: authentication,
                  baseURL: baseURL
                });

              case 5:
                setState({
                  isConnecting: false,
                  isConnected: true,
                  isError: false,
                  error: null,
                  client: client
                });
                _context.next = 11;
                break;

              case 8:
                _context.prev = 8;
                _context.t0 = _context["catch"](0);
                setState({
                  isConnecting: false,
                  isConnected: true,
                  isError: true,
                  error: _context.t0,
                  client: null
                });

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 8]]);
      }));
      return _connect2.apply(this, arguments);
    }

    _connect();

    return function () {
      var _state$client;

      (_state$client = state.client) == null ? void 0 : _state$client.disconnect();
    };
  }, [authentication, baseURL]);
  return React__default["default"].createElement(MyceliumContext.Provider, {
    value: state
  }, children);
}

var NOT_IN_CONTEXT_WARNING = 'No Mycelium context. Did you forget to wrap your app in a <MyceliumProvider />?';
function useMyceliumClient() {
  var ctx = React.useContext(MyceliumContext);

  if (ctx == null) {
    throw new Error(NOT_IN_CONTEXT_WARNING);
  }

  return ctx;
}

/**
 * Subscribe to a channel.
 * @param channelName The name of the channel you want to subscribe to.
 * @returns Instance of the channel you just subscribed to.
 *
 * @example
 * ```typescript
 * const channel = useChannel("my-channel")
 * channel.on("some-event", (data) => {
 *    // Do something with data
 * })
 * ```
 */

function useChannel(channelName) {
  !channelName ? invariant__default["default"](false, 'Must supply channelName to useChannel')  : void 0;

  var _useMyceliumClient = useMyceliumClient(),
      client = _useMyceliumClient.client,
      isConnected = _useMyceliumClient.isConnected;

  var _useState = React.useState(),
      channel = _useState[0],
      setChannel = _useState[1];

  var _useState2 = React.useState({
    isLoading: false,
    isSuccess: false,
    isError: false,
    error: null
  }),
      state = _useState2[0],
      setState = _useState2[1];

  React.useEffect(function () {
    function _subscribe() {
      return _subscribe2.apply(this, arguments);
    }

    function _subscribe2() {
      _subscribe2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(!client || !isConnected)) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                _context.prev = 2;
                setState({
                  isLoading: true,
                  isSuccess: false,
                  isError: false,
                  error: null
                });
                _context.t0 = setChannel;
                _context.next = 7;
                return client.channel(channelName);

              case 7:
                _context.t1 = _context.sent;
                (0, _context.t0)(_context.t1);
                setState({
                  isLoading: false,
                  isSuccess: true,
                  isError: false,
                  error: null
                });
                _context.next = 15;
                break;

              case 12:
                _context.prev = 12;
                _context.t2 = _context["catch"](2);
                setState({
                  isLoading: false,
                  isSuccess: false,
                  isError: true,
                  error: _context.t2
                });

              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[2, 12]]);
      }));
      return _subscribe2.apply(this, arguments);
    }

    _subscribe(); // Cleanup on unmount/re-render


    return function () {
      channel == null ? void 0 : channel.unsubscribe()["catch"](console.error);
    };
  }, [client]);
  return {
    channel: channel,
    isLoading: state.isLoading,
    isSuccess: state.isSuccess,
    isError: state.isError,
    error: state.error
  };
}

/**
 * Publish an event.
 *
 * @param channel Mycelium channel to publish on
 */

function usePublishEvent(channel) {
  var _useState = React.useState({
    isLoading: false,
    isSuccess: false,
    isError: false,
    error: null
  }),
      state = _useState[0],
      setState = _useState[1];

  return {
    publish: function () {
      var _publish = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(event, data, includePublisher) {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (includePublisher === void 0) {
                  includePublisher = false;
                }

                if (channel) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt("return");

              case 3:
                _context.prev = 3;
                setState({
                  isLoading: true,
                  isSuccess: false,
                  isError: false,
                  error: null
                });
                _context.next = 7;
                return channel.publish(event, data, includePublisher);

              case 7:
                setState({
                  isLoading: false,
                  isSuccess: true,
                  isError: false,
                  error: null
                });
                _context.next = 13;
                break;

              case 10:
                _context.prev = 10;
                _context.t0 = _context["catch"](3);
                setState({
                  isLoading: false,
                  isSuccess: false,
                  isError: true,
                  error: _context.t0
                });

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[3, 10]]);
      }));

      function publish(_x, _x2, _x3) {
        return _publish.apply(this, arguments);
      }

      return publish;
    }(),
    isLoading: state.isLoading,
    isSuccess: state.isSuccess,
    isError: state.isError,
    error: state.error
  };
}

/**
 * Subscribe to a channel lazily.
 *
 * @example
 * ```typescript
 * const channel = useChannel("my-channel")
 * channel.on("some-event", (data) => {
 *    // Do something with data
 * })
 * ```
 */

function useSubscribe() {
  var _useMyceliumClient = useMyceliumClient(),
      client = _useMyceliumClient.client;

  var _useState = React.useState(),
      channel = _useState[0],
      setChannel = _useState[1];

  var _useState2 = React.useState({
    isLoading: false,
    isSuccess: false,
    isError: false,
    error: null
  }),
      state = _useState2[0],
      setState = _useState2[1];

  React.useEffect(function () {
    // Cleanup on unmount/re-render
    return function () {
      channel == null ? void 0 : channel.unsubscribe()["catch"](console.error);
    };
  }, [client]);
  return {
    subscribe: function () {
      var _subscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(channelName) {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (client) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                _context.prev = 2;
                setState({
                  isLoading: true,
                  isSuccess: false,
                  isError: false,
                  error: null
                });
                _context.t0 = setChannel;
                _context.next = 7;
                return client.channel(channelName);

              case 7:
                _context.t1 = _context.sent;
                (0, _context.t0)(_context.t1);
                setState({
                  isLoading: false,
                  isSuccess: true,
                  isError: false,
                  error: null
                });
                _context.next = 15;
                break;

              case 12:
                _context.prev = 12;
                _context.t2 = _context["catch"](2);
                setState({
                  isLoading: false,
                  isSuccess: false,
                  isError: true,
                  error: _context.t2
                });

              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[2, 12]]);
      }));

      function subscribe(_x) {
        return _subscribe.apply(this, arguments);
      }

      return subscribe;
    }(),
    isLoading: state.isLoading,
    isSuccess: state.isSuccess,
    isError: state.isError,
    error: state.error
  };
}

/**
 * Adds the listener function to the end of the listeners array for the event.
 *
 * @param channel Mycelium channel to listen to
 * @param event Name of event to listen to
 * @param listener Listener function to call on a new event
 */

function useOnEvent(channel, event, listener) {
  // error when required arguments aren't passed.
  !event ? invariant__default["default"](false, 'Must supply event to useOnEvent')  : void 0;
  !listener ? invariant__default["default"](false, 'Must supply listener to useOnEvent')  : void 0;
  React.useEffect(function () {
    if (!channel) {
      return;
    }

    channel.on(event, listener);
    return function () {
      channel.off(event, listener);
    };
  }, [channel, event, listener]);
}

/**
 * Adds a listener that will be fired when any event is emitted.
 *
 * @param channel Mycelium channel to listen to
 * @param listener Listener function to call when any event is emitted
 */

function useOnAnyEvent(channel, listener) {
  // error when required arguments aren't passed.
  !listener ? invariant__default["default"](false, 'Must supply listener to useOnAnyEvent')  : void 0;
  React.useEffect(function () {
    if (!channel) {
      return;
    }

    channel.onAny(listener);
    return function () {
      channel.offAny(listener);
    };
  }, [channel, listener]);
}

/**
 * Adds a one-time listener function for the event.
 *
 * @param channel Mycelium channel to listen to
 * @param event Name of event to listen to
 * @param listener Listener function to call on a new event
 */

function useOnceEvent(channel, event, listener) {
  // error when required arguments aren't passed.
  !event ? invariant__default["default"](false, 'Must supply event to useOnceEvent')  : void 0;
  !listener ? invariant__default["default"](false, 'Must supply listener to useOnceEvent')  : void 0;
  React.useEffect(function () {
    if (!channel) {
      return;
    }

    channel.once(event, listener);
    return function () {
      channel.offOnce(event, listener);
    };
  }, [channel, event, listener]);
}

/**
 * Adds a listener that will be fired when any event is emitted. The listener is added to the beginning of the listeners array.
 *
 * @param channel Mycelium channel to listen to
 * @param listener Listener function to call when any event is emitted
 */

function usePrependAnyEvent(channel, listener) {
  // error when required arguments aren't passed.
  !listener ? invariant__default["default"](false, 'Must supply listener to usePrependAnyEvent')  : void 0;
  React.useEffect(function () {
    if (!channel) {
      return;
    }

    channel.prependAny(listener);
    return function () {
      channel.offAny(listener);
    };
  }, [channel, listener]);
}

Object.defineProperty(exports, 'AuthenticationType', {
  enumerable: true,
  get: function () { return core.AuthenticationType; }
});
Object.defineProperty(exports, 'Client', {
  enumerable: true,
  get: function () { return core.Client; }
});
exports.MyceliumProvider = MyceliumProvider;
exports.useChannel = useChannel;
exports.useMyceliumClient = useMyceliumClient;
exports.useOnAnyEvent = useOnAnyEvent;
exports.useOnEvent = useOnEvent;
exports.useOnceEvent = useOnceEvent;
exports.usePrependAnyEvent = usePrependAnyEvent;
exports.usePublishEvent = usePublishEvent;
exports.useSubscribe = useSubscribe;
//# sourceMappingURL=react.cjs.development.js.map
