{"version":3,"file":"core.cjs.development.js","sources":["../src/message.ts","../src/client.ts"],"sourcesContent":["enum MessageTypes {\n  Hello = 'hello',\n  Error = 'error',\n  Subscribe = 'subscribe',\n  SubscribeSucess = 'subscribe_success',\n  Unsubscribe = 'unsubscribe',\n  UnsubscribeSuccess = 'unsubscribe_success',\n  Publish = 'publish',\n  PublishSuccess = 'publish_success',\n}\n\ninterface HelloMessage {\n  t: MessageTypes.Hello;\n  d: {\n    sid: string;\n  };\n}\n\ninterface SubscribeSuccessMessage {\n  t: MessageTypes.SubscribeSucess;\n  d: {\n    s: number;\n    c: string;\n  };\n}\n\ninterface PublishSuccessMessage {\n  t: MessageTypes.PublishSuccess;\n  d: {\n    s: number;\n    c: string;\n  };\n}\n\ninterface PublishMessage {\n  t: MessageTypes.Publish;\n  d: {\n    e: string;\n    c: string;\n    d: unknown;\n  };\n}\n\ninterface ErrorMessage {\n  s?: number;\n  t: MessageTypes;\n  r: string;\n}\n\nexport {\n  ErrorMessage,\n  HelloMessage,\n  MessageTypes,\n  PublishMessage,\n  PublishSuccessMessage,\n  SubscribeSuccessMessage,\n};\n","import ReconnectingWebSocket from 'reconnecting-websocket';\nimport waitForExpect from 'wait-for-expect';\n\nimport {\n  ErrorMessage,\n  HelloMessage,\n  MessageTypes,\n  PublishMessage,\n  PublishSuccessMessage,\n  SubscribeSuccessMessage,\n} from './message';\n\ninterface KeyAuthentication {\n  type: AuthenticationType.KEY;\n\n  /**\n   * How to get the key used to authenticate the connection. For example by simply returning it or fetching it.\n   * Don't use this authentication type in untrusted environments.\n   * ```js\n   * return \"my-key-id:my-key-secret\";\n   * ```\n   */\n  getKey: () => string | Promise<string>;\n}\n\ninterface TokenAuthentication {\n  type: AuthenticationType.TOKEN;\n\n  /**\n   * How to get the token used to authenticate the connection. For example by fetching your API which\n   * returns the token.\n   * ```js\n   * const { token } = await fetch(MY_API_URL).then(r => r.json());\n   * return token;\n   * ```\n   */\n  getToken: () => string | Promise<string>;\n}\n\nenum AuthenticationType {\n  KEY,\n  TOKEN,\n}\n\ninterface Connection {\n  authentication: KeyAuthentication | TokenAuthentication;\n  baseURL?: string;\n  manual?: boolean;\n}\n\ninterface Ack {\n  failureReason?: string;\n}\n\ntype SpecialEvent = 'connect' | 'disconnect';\n\ntype Listener<TData> = (data: TData, event: string) => void;\n\ninterface Channel {\n  name: string;\n  on: <TData = unknown>(event: string, listener: Listener<TData>) => void;\n  once: <TData = unknown>(event: string, listener: Listener<TData>) => void;\n  off: <TData>(event: string, listener: Listener<TData>) => void;\n  offOnce: <TData>(event: string, listener: Listener<TData>) => void;\n  removeAllListeners: (...events: string[]) => void;\n  onAny: <TData>(listener: Listener<TData>) => void;\n  prependAny: <TData>(listener: Listener<TData>) => void;\n  offAny: <TData>(...listeners: Listener<TData>[]) => void;\n  publish: <TData = unknown>(\n    event: string,\n    data: TData,\n    includePublisher: boolean\n  ) => Promise<void>;\n  unsubscribe: () => Promise<void>;\n}\n\nconst defaults = {\n  baseURL: 'wss://mycelium-server.fly.dev/realtime',\n};\n\nclass Client {\n  private channels = new Map<\n    string,\n    {\n      instance: Channel;\n      eventListeners: { event: string; listener: Listener<any> }[];\n      anyListeners: Listener<any>[];\n      onceListeners: { event: string; listener: Listener<any> }[];\n    }\n  >();\n\n  private seqNumber = 1;\n  private acks = new Map<number, Ack>();\n  private specialEventsHandlers = new Map<SpecialEvent, VoidFunction[]>();\n  private ws: ReconnectingWebSocket | undefined;\n\n  public sid: string | undefined;\n  public isConnected = false;\n\n  constructor(connection: Connection) {\n    if (!connection.manual) {\n      this.connect(connection);\n    }\n  }\n\n  public getChannels() {\n    return Array.from(this.channels.keys());\n  }\n\n  public async channel(channelName: string): Promise<Channel> {\n    if (!this.isConnected || !this.ws) {\n      throw new Error(`failed to use channel ${channelName}, not connected`);\n    }\n\n    const existingChannel = this.channels.get(channelName);\n    if (existingChannel) {\n      return existingChannel.instance;\n    }\n\n    const subscribeSeq = this.seqNumber++;\n\n    this.ws.send(\n      JSON.stringify({\n        t: MessageTypes.Subscribe,\n        d: {\n          s: subscribeSeq,\n          c: channelName,\n        },\n      })\n    );\n\n    await waitForExpect(() => {\n      if (!this.acks.has(subscribeSeq)) {\n        throw new Error(\n          `failed to subscribe to channel ${channelName}, timed out`\n        );\n      }\n    });\n\n    const ack = this.acks.get(subscribeSeq);\n    if (ack?.failureReason) {\n      throw new Error(ack.failureReason);\n    }\n\n    const channel: Channel = {\n      name: channelName,\n\n      unsubscribe: async () => {\n        if (!this.isConnected || !this.ws) {\n          throw new Error(\n            `failed to unsubscribe from channel ${channelName}, not connected`\n          );\n        }\n\n        if (!this.channels.has(channelName)) {\n          throw new Error(\n            `failed to unsubscribe from channel ${channelName}, not subscribed`\n          );\n        }\n\n        const unsubscribeSeq = this.seqNumber++;\n\n        this.ws.send(\n          JSON.stringify({\n            t: MessageTypes.Unsubscribe,\n            d: {\n              s: unsubscribeSeq,\n              c: channelName,\n            },\n          })\n        );\n\n        await waitForExpect(() => {\n          if (!this.acks.has(unsubscribeSeq)) {\n            throw new Error(\n              `failed to unsubscribe from channel ${channelName}, timed out`\n            );\n          }\n        });\n\n        const ack = this.acks.get(unsubscribeSeq);\n        if (ack?.failureReason) {\n          throw new Error(ack.failureReason);\n        }\n\n        this.channels.delete(channelName);\n      },\n\n      off: (event, listener) => {\n        const channel = this.channels.get(channelName);\n        if (channel) {\n          this.channels.set(channelName, {\n            ...channel,\n            eventListeners: channel.eventListeners.filter(\n              (l) => l.event !== event && l.listener !== listener\n            ),\n          });\n        }\n      },\n\n      offOnce: (event, listener) => {\n        const channel = this.channels.get(channelName);\n        if (channel) {\n          this.channels.set(channelName, {\n            ...channel,\n            onceListeners: channel.onceListeners.filter(\n              (l) => l.event !== event && l.listener !== listener\n            ),\n          });\n        }\n      },\n\n      offAny: (...listeners) => {\n        const channel = this.channels.get(channelName);\n        if (channel) {\n          if (!listeners.length) {\n            // Remove all listeners\n            this.channels.set(channelName, {\n              ...channel,\n              anyListeners: [],\n            });\n\n            return;\n          }\n\n          this.channels.set(channelName, {\n            ...channel,\n            anyListeners: channel.anyListeners.filter(\n              (l) => !listeners.some((listener) => listener === l)\n            ),\n          });\n        }\n      },\n\n      on: (event, listener) => {\n        const channel = this.channels.get(channelName);\n        if (channel) {\n          this.channels.set(channelName, {\n            ...channel,\n            eventListeners: [\n              ...channel.eventListeners,\n              {\n                event,\n                listener: (data: any, event) => {\n                  listener(data, event);\n                },\n              },\n            ],\n          });\n        }\n      },\n\n      onAny: (listener) => {\n        const channel = this.channels.get(channelName);\n        if (channel) {\n          this.channels.set(channelName, {\n            ...channel,\n            anyListeners: [...channel.anyListeners, listener],\n          });\n        }\n      },\n\n      once: (event, listener) => {\n        const channel = this.channels.get(channelName);\n        if (channel) {\n          this.channels.set(channelName, {\n            ...channel,\n            onceListeners: [\n              ...channel.onceListeners.filter((l) => l.event !== event),\n              {\n                event,\n                listener: (data: any, event) => {\n                  listener(data, event);\n                },\n              },\n            ],\n          });\n        }\n      },\n\n      prependAny: (listener) => {\n        const channel = this.channels.get(channelName);\n        if (channel) {\n          this.channels.set(channelName, {\n            ...channel,\n            anyListeners: [listener, ...channel.anyListeners],\n          });\n        }\n      },\n\n      removeAllListeners: (...events) => {\n        const channel = this.channels.get(channelName);\n        if (channel) {\n          if (!events.length) {\n            // Remove all listeners\n            this.channels.set(channelName, {\n              ...channel,\n              eventListeners: [],\n            });\n\n            return;\n          }\n\n          this.channels.set(channelName, {\n            ...channel,\n            eventListeners: channel.eventListeners.filter(\n              (l) => !events.some((ev) => ev === l.event)\n            ),\n          });\n        }\n      },\n\n      publish: async (event, data, includePublisher = false) => {\n        if (!this.isConnected || !this.ws) {\n          throw new Error(\n            `failed to publish message on channel ${channelName}, not connected`\n          );\n        }\n\n        const publishSeq = this.seqNumber++;\n\n        this.ws.send(\n          JSON.stringify({\n            t: MessageTypes.Publish,\n            d: {\n              e: event,\n              s: publishSeq,\n              c: channelName,\n              d: data,\n              ip: includePublisher,\n            },\n          })\n        );\n\n        await waitForExpect(() => {\n          if (!this.acks.has(publishSeq)) {\n            throw new Error(\n              `failed to publish message on channel ${channelName}, timed out`\n            );\n          }\n        });\n\n        const ack = this.acks.get(publishSeq);\n        if (ack?.failureReason) {\n          throw new Error(ack.failureReason);\n        }\n      },\n    };\n\n    this.channels.set(channelName, {\n      instance: channel,\n      anyListeners: [],\n      eventListeners: [],\n      onceListeners: [],\n    });\n\n    return channel;\n  }\n\n  public on(specialEvent: SpecialEvent, handler: VoidFunction) {\n    const existingHandlers = this.specialEventsHandlers.get(specialEvent) || [];\n    this.specialEventsHandlers.set(specialEvent, [\n      ...existingHandlers,\n      handler,\n    ]);\n  }\n\n  private runSpecialEventHandlers(specialEvent: SpecialEvent) {\n    this.specialEventsHandlers.get(specialEvent)?.forEach((handler) => {\n      handler();\n    });\n  }\n\n  public disconnect() {\n    if (!this.ws || !this.isConnected) {\n      throw new Error(`can't disconnect, not connected`);\n    }\n\n    this.ws.close();\n\n    // Reset state.\n    this.acks = new Map();\n    this.channels = new Map();\n    this.seqNumber = 1;\n    this.isConnected = false;\n    this.sid = undefined;\n    this.ws = undefined;\n  }\n\n  public async connect({\n    authentication,\n    baseURL = defaults.baseURL,\n  }: Connection) {\n    let url: string;\n    if (authentication.type === AuthenticationType.KEY) {\n      const key = await authentication.getKey();\n      url = `${baseURL}?key=${key}`;\n    } else {\n      const token = await authentication.getToken();\n      url = `${baseURL}?token=${token}`;\n    }\n\n    this.ws = new ReconnectingWebSocket(url);\n    this.setupListeners();\n  }\n\n  private setupListeners() {\n    if (!this.ws) {\n      return;\n    }\n\n    this.ws.addEventListener('error', () => {\n      this.runSpecialEventHandlers('disconnect');\n    });\n\n    this.ws.addEventListener('close', () => {\n      this.runSpecialEventHandlers('disconnect');\n    });\n\n    this.ws.addEventListener('message', (ev) => {\n      try {\n        const message = JSON.parse(ev.data.toString());\n        switch (message.t) {\n          case MessageTypes.Hello: {\n            const { sid } = message.d as HelloMessage['d'];\n            this.sid = sid;\n            this.isConnected = true;\n            this.runSpecialEventHandlers('connect');\n            return;\n          }\n\n          case MessageTypes.Publish: {\n            const {\n              c: channelName,\n              d: data,\n              e: event,\n            } = message.d as PublishMessage['d'];\n\n            const channel = this.channels.get(channelName);\n            if (channel) {\n              channel.eventListeners.forEach((l) => {\n                if (l.event === event) {\n                  l.listener(data, event);\n                }\n              });\n\n              channel.onceListeners\n                .find((l) => l.event === event)\n                ?.listener(data, event);\n\n              channel.anyListeners.forEach((listener) => {\n                listener(data, event);\n              });\n            }\n\n            return;\n          }\n\n          case MessageTypes.UnsubscribeSuccess:\n          case MessageTypes.PublishSuccess:\n          case MessageTypes.SubscribeSucess: {\n            const { c: channelName, s } =\n              message.d as SubscribeSuccessMessage['d'];\n\n            this.acks.set(s, {});\n            return;\n          }\n\n          case MessageTypes.Error: {\n            const { r: reason, s } = message as ErrorMessage;\n            if (s) {\n              this.acks.set(s, { failureReason: reason });\n            }\n\n            return;\n          }\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    });\n  }\n}\n\nexport {\n  Client,\n  AuthenticationType,\n  Connection,\n  TokenAuthentication,\n  KeyAuthentication,\n  Channel,\n};\n\nexport type { Listener };\n"],"names":["MessageTypes","AuthenticationType","defaults","baseURL","Client","connection","channels","Map","seqNumber","acks","specialEventsHandlers","ws","sid","isConnected","manual","connect","getChannels","Array","from","keys","channel","channelName","Error","existingChannel","get","instance","subscribeSeq","send","JSON","stringify","t","Subscribe","d","s","c","waitForExpect","has","ack","failureReason","name","unsubscribe","unsubscribeSeq","Unsubscribe","off","event","listener","set","eventListeners","filter","l","offOnce","onceListeners","offAny","listeners","length","anyListeners","some","on","data","onAny","once","prependAny","removeAllListeners","events","ev","publish","includePublisher","publishSeq","Publish","e","ip","specialEvent","handler","existingHandlers","runSpecialEventHandlers","forEach","disconnect","close","undefined","authentication","type","KEY","getKey","key","url","getToken","token","ReconnectingWebSocket","setupListeners","addEventListener","message","parse","toString","Hello","find","UnsubscribeSuccess","PublishSuccess","SubscribeSucess","reason","r","error","console"],"mappings":"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"}