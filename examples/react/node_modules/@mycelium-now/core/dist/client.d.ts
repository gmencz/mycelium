interface KeyAuthentication {
    type: AuthenticationType.KEY;
    /**
     * How to get the key used to authenticate the connection. For example by simply returning it or fetching it.
     * Don't use this authentication type in untrusted environments.
     * ```js
     * return "my-key-id:my-key-secret";
     * ```
     */
    getKey: () => string | Promise<string>;
}
interface TokenAuthentication {
    type: AuthenticationType.TOKEN;
    /**
     * How to get the token used to authenticate the connection. For example by fetching your API which
     * returns the token.
     * ```js
     * const { token } = await fetch(MY_API_URL).then(r => r.json());
     * return token;
     * ```
     */
    getToken: () => string | Promise<string>;
}
declare enum AuthenticationType {
    KEY = 0,
    TOKEN = 1
}
interface Connection {
    authentication: KeyAuthentication | TokenAuthentication;
    baseURL?: string;
    manual?: boolean;
}
declare type SpecialEvent = 'connect' | 'disconnect';
declare type Listener<TData> = (data: TData, event: string) => void;
interface Channel {
    name: string;
    on: <TData = unknown>(event: string, listener: Listener<TData>) => void;
    once: <TData = unknown>(event: string, listener: Listener<TData>) => void;
    off: <TData>(event: string, listener: Listener<TData>) => void;
    offOnce: <TData>(event: string, listener: Listener<TData>) => void;
    removeAllListeners: (...events: string[]) => void;
    onAny: <TData>(listener: Listener<TData>) => void;
    prependAny: <TData>(listener: Listener<TData>) => void;
    offAny: <TData>(...listeners: Listener<TData>[]) => void;
    publish: <TData = unknown>(event: string, data: TData, includePublisher: boolean) => Promise<void>;
    unsubscribe: () => Promise<void>;
}
declare class Client {
    private channels;
    private seqNumber;
    private acks;
    private specialEventsHandlers;
    private ws;
    sid: string | undefined;
    isConnected: boolean;
    constructor(connection: Connection);
    getChannels(): string[];
    channel(channelName: string): Promise<Channel>;
    on(specialEvent: SpecialEvent, handler: VoidFunction): void;
    private runSpecialEventHandlers;
    disconnect(): void;
    connect({ authentication, baseURL, }: Connection): Promise<void>;
    private setupListeners;
}
export { Client, AuthenticationType, Connection, TokenAuthentication, KeyAuthentication, Channel, };
export type { Listener };
